#include <mpi.h>
#include <stdio.h>

int main(int argc, char* argv[]) {

	int rank, size, start, end, Limit;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Status status;
	int sum = 0; int sumTotal = 0;

	Limit = 100;

	// define start and end points
	start = rank * (Limit / size) + 1;
	if (rank == (size - 1)) {
		end = Limit;
	}
	else {
		end = start + (Limit / size) - 1;
	}

	for (int i = start; i <= end; i++) {
		sum = sum + i;
	}
	printf("I am rank %d, and I have the number  %d \n \n", rank, sum);

	MPI_Reduce(&sum, &sumTotal, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	/*
	
	1.) the pointer of a buffer that will send the data for reduction.

	2.) the pointer on a buffer that will store the reduced solution.

	3.) the number of integers to pull from each process. In this case, only one

	4.) data type of the buffer element

	5.) the operation to be perfomed on the data

	6.) the root process that will handle the data, in this case, 0.

	7.) the communication method of the process, in this case, MPI_COMM_WORLD

	*/
	
	printf("After reduction, I am rank %d and I have number %d",rank, sumTotal);


	MPI_Finalize();

	return 0;
}
