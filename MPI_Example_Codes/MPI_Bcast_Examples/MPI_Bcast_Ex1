#include<iostream>
#include <mpi.h>

using namespace std;
int MAX_SIZE = 5;
int* x = new int[MAX_SIZE];
// this is a unique way to define a buffer with an array of numbers.
// pay close attention to the formatting here.


void main(int argc, char* argv[]) {

	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if (rank == 0)
	{
		//fill x with values.
		// for loops are effective tools for defining an array quickly
		for (int i = 0; i < MAX_SIZE; i++)
		{
			x[i] = i + 10;
		}
	}

	MPI_Bcast(x, MAX_SIZE, MPI_INT , 0 , MPI_COMM_WORLD);
	// The arguments of B cast are as follows:
	// x is a buffer array with a set of numbers explicity defined by the for loop shown above.
	// the next integer is a specification of how many elements to send from the previously defiend buffer.
	// MPI_INT is simply a designation of the data type.
	// 0 specifies the process that performs the broadcast function.
	// As a final argument, MPI_COMM_WORLD specifies how the processes will coommunicate (this is the default).


	cout << "Process # " << rank << "\t size is " << size << "\n";
	cout << x[1];
	// when a process rank is unspecified, the code written will appear in memeory on all available processes specified.
	// in other words, writing 'cout << x[1]' will appear on process 0-3, wheras any rank designation will operate data only on that process.
	// print array values according to their elements. Do not simply call x.

	MPI_Finalize();

}
