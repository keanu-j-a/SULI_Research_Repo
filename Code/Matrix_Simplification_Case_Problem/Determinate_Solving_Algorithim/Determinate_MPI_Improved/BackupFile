#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <chrono>
#include <iostream>

#define N 3

long double mat[N][N];

// Function to get cofactor of mat[p][q] in temp[][]. n is
// current dimension of mat[][]
void Cofactor(long double mat[N][N], long double cofactors[N][N], int p, int q, int n)
{
	int i = 0, j = 0;

	// Looping for each element of the matrix
	for (int row = 0; row < n; row++)
	{
		for (int col = 0; col < n; col++)
		{
			// Copying into temporary matrix only those
			// element which are not in given row and
			// column
			if (row != p && col != q)
			{
				cofactors[i][j++] = mat[row][col];

				// Row is filled, so increase row index and
				// reset col index
				if (j == n - 1)
				{
					j = 0;
					i++;
				}
			}
		}
	}
}

/* Recursive function for finding determinant of matrix.
n is current dimension of mat[][]. */
long double detMatrix(long double mat[N][N], int n)
{
	int D = 0; // Initialize result
	long double cofactors[N][N];
	int sign = 1; // To store sign multiplier

	// Base case : if matrix contains single element
	if (n == 1)
		return mat[0][0];

	// Iterate for each element of first row
	for (int f = 0; f < n; f++)
	{
		// Getting Cofactor of mat[0][f]
		Cofactor(mat, cofactors, 0, f, n);
		D += sign * mat[0][f] * detMatrix(cofactors, n - 1);

		// terms are to be added with alternate sign
		sign = -sign;
	}

	return D;
}

// Driver program to test above functions
int main()
{

	srand(100);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			mat[i][j] = rand() % 12;
		}
	}

	// Function call
	printf("Determinant of the matrix is : %lf", detMatrix(mat, N));
	return 0;
}
