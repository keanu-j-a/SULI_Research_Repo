This is a list of all Github commands used to complete standard operations at INL:

1.) to push changes to a repo.

    > fork
    > git clone
    > cd to the correct directory
    > git status

    (make changes to the file using a VS code)

    > git status (should produce a different message)
    > git add --all
    > git commit -m "Put a random comment here"

    (
    you may need to specify a username and password:
    > git config --global user.email "you@example.com"
    > git config --global user.name "Your Name"
    )

    > git push
    
    (make sure you save chnaged frequently, or nothing will update in GitHub).

After this, you should check the Github repo to make sure that everything updated correctly.

2.) This next step is specific to Dr. Gaston's sparse-send-recieve github repo.

    > git submodule init
    > git submodule update
    > cd gslib
    > make
    > cd ..
    > make
    
    (you should only have to do this once)
    
3.) How to run files.

    > mpiexec ./sparse-opt num_neighbors message_size num_iterations
    
    (files will need to be updated after each implementation.
    
4.) Github cloning process (from a GitBash terminal)

    (this will explain how to clone a repo and upload entire documents to a repo)

    > navigate to folder you would like to host your github repo
    > either cd to the appropriate directory OR open a Git Bash terminal at the folder

    > git clone [insert_your_URL_here]
    > (wait for Github folder to appear in dir)
    > Cntrl + C ... Cntrl + V the files you want in you into your Github
    > close, re-open termimal, and cd to the Github file location.
    > git add -A
    > remove the # from all files you wish to commit
    > (once complete) :wq
    > git push

5.) Git push and pull from VS studio

    > Prepare a file for cloning a Github repo into (if not done already)
    > If a github repo is prepared, navigate the .C file > right click > open with VS Studio
    > At the bottom right hand of the program editor, change the Github repo to your dir folder
    > Once selected, double click the pen icon at the bottom right hand of the page to show solution folder
    > Make changes to the program as necessary.
    > Provide the required git commit message.
    > to push changes, click the "Commit All" dropdown icon, select "Commit all and push"
    > Sync the file for safekeeping. The push should now be updated to the Github repo.

    (NOTE! if permission errors occur)

    > Navigate to the solutions page displaying all of the changes made to the program.
    > right click > ignore stash on all files that are not explicity "gitingore" or "your_code_name"
    > retry sync and commit.
    > if errors persist, check tsack overflow



